"""Manages the state of a source-to-sink glacial sediment transport model."""

import numpy as np
import jax
import jax.numpy as jnp
import equinox as eqx
import dataclasses

from utils import StaticGrid

class ModelState(eqx.Module):
    """Store variable fields, shared parameters, and elapsed time.

    Required input variables (defined on grid nodes):
        grid: StaticGrid object representing the model domain.
        ice_thickness: Thickness of the glacier, ice cap, or ice sheet.
        surface_elevation: Elevation of the top surface of the ice mass.
        sliding_velocity_vector: Vector-valued (x, y) sliding velocity.
        geothermal_heat_flux: Heat flux from the underlying geotherm.
        water_pressure: Pressure of water in the subglacial drainage system.

    Derived variables:
        bedrock_elevation: Difference between surface elevation and ice thickness.
        node_is_terminus: Boolean array indicating terminus nodes.
        ice_mask: Boolean array where ice thickness > a threshold value.
        overburden_pressure: Hydrostatic pressure at the base of the ice mass.
        sliding_velocity: Sliding velocity mapped onto grid links.
        shear_stress: Basal shear stress derived from sliding and pressure.
        frictional_heat_flux: Heat generated by friction at the ice-bed interface.
        effective_pressure: Difference between overburden and water pressure.
        melt_rate: Specific (length / time) rate of melt at the base of the ice mass.

    Model variables
        till_thickness: Thickness of the (eroded) till layer beneath the ice mass.
        fringe_thickness: Thickness of the frozen fringe layer in the base of the ice mass.
        dispersed_thickness: Thickness of the dispersed layer above the frozen fringe.
    """

    # Components
    grid: StaticGrid

    # Glacier geometry
    ice_thickness: jax.Array = eqx.field(converter = jnp.asarray)
    surface_elevation: jax.Array = eqx.field(converter = jnp.asarray)
    bedrock_elevation: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    node_is_terminus: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    ice_mask: jax.Array = eqx.field(converter = jnp.asarray, init = False)

    # Ice dynamics
    overburden_pressure: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    sliding_velocity_vector: jax.Array = eqx.field(converter = jnp.asarray)
    sliding_velocity: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    shear_stress: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    frictional_heat_flux: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    geothermal_heat_flux: jax.Array = eqx.field(converter = jnp.asarray)

    # Hydrology
    water_pressure: jax.Array = eqx.field(converter = jnp.asarray)
    effective_pressure: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    melt_rate: jax.Array = eqx.field(converter = jnp.asarray, init = False)

    # Thermodynamics

    # Sediment transport
    till_thickness: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    fringe_thickness: jax.Array = eqx.field(converter = jnp.asarray, init = False)
    dispersed_thickness: jax.Array = eqx.field(converter = jnp.asarray, init = False)

    # Lists of variables and locations
    data_vars: list = eqx.field(init = False)
    vars_at_node: list = eqx.field(init = False)
    vars_at_link: list = eqx.field(init = False)

    # Constant parameters
    time_elapsed: float = 0.0
    sec_per_a: int = 31556926
    gravity: float = 9.81
    water_density: float = 1000
    water_viscosity: float = 1.8e-3
    ice_density: float = 917
    ice_latent_heat: float = 3.34e5
    min_ice_thickness: float = 0.1

    def __post_init__(self):
        self.data_vars = [i.name for i in dataclasses.fields(ModelState) if i.type == jax.Array]
        self.vars_at_node = [i for i in self.data_vars if len(getattr(self, i)) == self.grid.number_of_nodes]
        self.vars_at_link = [i for i in self.data_vars if len(getattr(self, i)) == self.grid.number_of_links]

